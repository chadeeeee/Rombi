from aiogram import Router, types, Bot
from aiogram.enums.chat_type import ChatType
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from pymongo.mongo_client import MongoClient

from config import URI

from datetime import datetime
import pytz
import os

photo_path = os.path.join(os.path.dirname(__file__), '../images/default_user_photo.jpg')

router = Router()
client = MongoClient(URI)
db = client["rombi"]
users = db["users"]
groups = db["groups"]

permissions = ("change_info+post_messages+edit_messages+delete_messages+restrict_members+invite_users+pin_messages"
               "+manage_topics+promote_members+manage_video_chats+manage_chat+post_stories+edit_stories+delete_stories")


@router.message(CommandStart())
async def start(message: Message):
    date_utc = datetime.now(pytz.UTC).strftime('%d.%m.%Y')

    user_exists = users.find_one({"user_id": message.from_user.id})

    if not user_exists:
        users.insert_one({
            "user_id": message.from_user.id,
            "username": message.from_user.username,
            "full_name": message.from_user.full_name,
            "joined_at": date_utc
        })

    if message.chat.type == "private":
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text="–î–æ–¥–∞—Ç–∏ Rombi –¥–æ –≥—Ä—É–ø–∏",
            url=f"t.me/RombiSfera_bot?startgroup&admin={permissions}")
        )
        builder.row(types.InlineKeyboardButton(
            text="–î–æ–¥–∞—Ç–∏ Rombi –¥–æ –∫–∞–Ω–∞–ª—É",
            url=f"t.me/RombiSfera_bot?startchannel&admin={permissions}")
        )
        await message.answer(f"üëã –ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.full_name}</b>!\n"
                             f"ü§ñ –Ø Rombi - –±–æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≥—Ä—É–ø —â–æ–± –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±—É–ª–æ –ª–µ–≥—à–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä—É–ø–æ—é!\n\n"
                             "‚ûï –î–æ–±–∞–≤ –º–µ–Ω–µ –≤ —á–∞—Ç –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É <blockquote>–î–æ–¥–∞—Ç–∏ Rombi –¥–æ –≥—Ä—É–ø–∏</blockquote>"
                             f"–∞–±–æ<blockquote>–î–æ–¥–∞—Ç–∏ Rombi –¥–æ –∫–∞–Ω–∞–ª—É</blockquote>\n"
                             f"üôÇ –©–∞—Å–ª–∏–≤–æ–≥–æ –º–æ–¥–µ—Ä—É–≤–∞–Ω–Ω—è!", reply_markup=builder.as_markup())
    else:
        await message.answer(f"üëã –ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.full_name}</b>!\n"
                             f"ü§ñ –Ø Rombi - –±–æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≥—Ä—É–ø —â–æ–± –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±—É–ª–æ –ª–µ–≥—à–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä—É–ø–æ—é!\n\n"
                             f"üôÇ –©–∞—Å–ª–∏–≤–æ–≥–æ –º–æ–¥–µ—Ä—É–≤–∞–Ω–Ω—è!")


@router.message(Command('help'))
async def help(message: Message):
    print(ChatType)
    if message.chat.type == "private":
        await message.answer("<b>üìú –ú–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏</b>\n"
                             "/start - –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                             "/help - –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ –º–µ–Ω—é\n"
                             "/lang - –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–µ–Ω–Ω—è—Ö –∑ –±–æ—Ç–æ–º (BETA)")
    elif message.chat.type != "private":
        await message.answer("<b>üìú –ú–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏</b>\n"
                             "/start - –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                             "/help - –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ –º–µ–Ω—é\n"
                             "/ban - –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥—Ä—É–ø—ñ –Ω–∞–∑–∞–≤–∂–¥–∏\n"
                             "/ro [—á–∞—Å RO] - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–º–æ–∂–µ –Ω—ñ—á–æ–≥–æ –ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç —Ç—ñ–ª—å–∫–∏ —á–∏—Ç–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
                             "/q - –∑—Ä–æ–±–∏—Ç–∏ —Ü–∏—Ç–∞—Ç—É [BETA]")


@router.message(Command('profile'))
async def profile(message: Message, bot: Bot):
    join_date = users.find_one({"user_id": message.from_user.id})
    print(f"join_date: {join_date['joined_at']}")
    user_id = message.from_user.id
    user_photos = await bot.get_user_profile_photos(user_id)

    if user_photos.total_count > 0:
        file_id = user_photos.photos[0][-1].file_id
        await bot.send_photo(chat_id=message.chat.id, photo=file_id,
                             caption=f"–¢–∏ <b>{message.from_user.full_name}</b>\n"
                                     f"ID: <b>{message.from_user.id}</b>\n"
                                     f"–ü–æ—è–≤–∏–≤—Å—è: <b>{join_date} UTC</b>")
    else:
        await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile(path=photo_path,
                                                                        filename="photo.jpg"),
                             caption=f"–¢–∏ <b>{message.from_user.full_name}</b>\n"
                                     f"ID: <b>{message.from_user.id}</b>\n"
                                     f"–ü–æ—è–≤–∏–≤—Å—è: <b>{join_date} UTC</b>")


@router.message(Command("rules"))
async def show_rules(message: Message):
    group_data = groups.find_one({"group_id": message.chat.id})
    if group_data and group_data.get("rules"):
        await message.answer(f'<b>–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏:</b>\n{group_data["rules"]}')
        logger.info(f"Rules displayed for user {message.from_user.id} in chat {message.chat.id}")
    else:
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ.")
        logger.info(f"User {message.from_user.id} requested rules in chat {message.chat.id}, but no rules are set.")
