import logging

from aiogram import Bot, F, Router, types
from aiogram.filters import Command
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, JOIN_TRANSITION, MEMBER, IS_NOT_MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ChatMemberUpdated, CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pymongo import MongoClient

from config import URI

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

router = Router()
client = MongoClient(URI, maxPoolSize=50, serverSelectionTimeoutMS=5000)
db = client["rombi"]
groups = db["groups"]


class ConfigureStates(StatesGroup):
    setting_hello = State()
    setting_bye = State()
    setting_rules = State()


async def check_admin_rights(user_id: int, chat_id: int, bot: Bot) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in {'creator', 'administrator'}
    except Exception as e:
        logger.error(f"Failed to check admin rights: {e}")
        return False


def get_main_keyboard() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üí¨ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è", callback_data="set_hello"),
                types.InlineKeyboardButton(text="üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è", callback_data="set_bye"),
                types.InlineKeyboardButton(text="üëÆ‚Äç‚ôÇÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="set_rules"),
            ]
        ]
    )


def get_back_keyboard() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data="configure_message")
            ],
            [types.InlineKeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
    )


def get_toggle_keyboard(group_data: dict, setting_type: str) -> types.InlineKeyboardMarkup:
    is_enabled = group_data.get(f"{setting_type}_enabled", True)
    status = "‚úÖ" if is_enabled else "üö´"

    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"–°—Ç–∞—Ç—É—Å: {status}",
                    callback_data=f"toggle_{setting_type}_status"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–ó–º—ñ–Ω–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                    callback_data=f"configure_{setting_type}_message"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                    callback_data="back_to_main_menu"
                )
            ]
        ]
    )


@router.message(Command("settings"))
async def settings_command(message: Message, bot: Bot):
    try:
        if not await check_admin_rights(message.from_user.id, message.chat.id, bot):
            await message.reply("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            return

        group_data = groups.find_one({"group_id": message.chat.id})
        if not group_data:
            group_data = {
                "hello": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                "bye": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                "rules": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                "hello_enabled": True,
                "bye_enabled": True
            }

        settings_text = (
            "<b>‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏:</b>\n\n"
            "<b>üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('hello', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üëã –ü—Ä–æ—â–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('bye', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üìú –ü—Ä–∞–≤–∏–ª–∞:</b>\n"
            f"{group_data.get('rules', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:"
        )

        await message.reply(
            settings_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in settings_command: {e}")
        await message.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.")


@router.callback_query(F.data == "set_hello")
async def set_hello(callback_query: CallbackQuery, bot: Bot):
    try:
        if not await check_admin_rights(callback_query.from_user.id, callback_query.message.chat.id, bot):
            await callback_query.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", show_alert=True)
            return

        group_data = groups.find_one({"group_id": callback_query.message.chat.id})
        current_hello = group_data.get('hello',
                                       '–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ') if group_data else '–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'

        await callback_query.message.edit_text(
            f"<b>üëã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è</b>\n\n"
            f"<b>–ü–æ—Ç–æ—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:</b>\n"
            f"{current_hello}\n\n"
            f"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ {'{user}'} –¥–ª—è –∑–≥–∞–¥–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
            f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è", callback_data="configure_hello_message")],
                    [types.InlineKeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                                                callback_data="back_to_main_menu")]
                ]
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in set_hello: {e}")
        await callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


@router.callback_query(F.data == "set_bye")
async def set_bye(callback_query: CallbackQuery, bot: Bot):
    try:
        if not await check_admin_rights(callback_query.from_user.id, callback_query.message.chat.id, bot):
            await callback_query.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", show_alert=True)
            return

        group_data = groups.find_one({"group_id": callback_query.message.chat.id})
        current_bye = group_data.get('bye',
                                     '–ü—Ä–æ—â–∞–Ω–Ω—è —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ') if group_data else '–ü—Ä–æ—â–∞–Ω–Ω—è —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'

        await callback_query.message.edit_text(
            f"<b>üëã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—â–∞–Ω–Ω—è</b>\n\n"
            f"<b>–ü–æ—Ç–æ—á–Ω–µ –ø—Ä–æ—â–∞–Ω–Ω—è:</b>\n"
            f"{current_bye}\n\n"
            f"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ {'{user}'} –¥–ª—è –∑–≥–∞–¥–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
            f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—â–∞–Ω–Ω—è.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—â–∞–Ω–Ω—è", callback_data="configure_bye_message")],
                    [types.InlineKeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                                                callback_data="back_to_main_menu")]
                ]
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in set_bye: {e}")
        await callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("toggle_"))
async def toggle_status(callback_query: CallbackQuery):
    setting_type = callback_query.data.split("_")[1]
    group_data = groups.find_one({"group_id": callback_query.message.chat.id})
    current_status = group_data.get(f"{setting_type}_enabled", True)
    new_status = not current_status

    groups.update_one(
        {"group_id": callback_query.message.chat.id},
        {"$set": {f"{setting_type}_enabled": new_status}},
        upsert=True
    )


@router.callback_query(F.data == "configure_hello_message")
async def configure_hello_message(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        if not await check_admin_rights(callback_query.from_user.id, callback_query.message.chat.id, bot):
            await callback_query.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", show_alert=True)
            return

        await state.set_state(ConfigureStates.setting_hello)
        await callback_query.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ {user} –¥–ª—è –∑–≥–∞–¥–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML-—Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É."
        )
    except Exception as e:
        logger.error(f"Error in configure_hello_message: {e}")
        await callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


@router.callback_query(F.data == "configure_bye_message")
async def configure_bye_message(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        if not await check_admin_rights(callback_query.from_user.id, callback_query.message.chat.id, bot):
            await callback_query.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", show_alert=True)
            return

        await state.set_state(ConfigureStates.setting_bye)
        await callback_query.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø—Ä–æ—â–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ {user} –¥–ª—è –∑–≥–∞–¥–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML-—Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É."
        )
    except Exception as e:
        logger.error(f"Error in configure_bye_message: {e}")
        await callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


@router.message(ConfigureStates.setting_hello)
async def receive_hello_message(message: Message, state: FSMContext, bot: Bot):
    try:
        if not await check_admin_rights(message.from_user.id, message.chat.id, bot):
            await message.reply("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            await state.clear()
            return

        groups.update_one(
            {"group_id": message.chat.id},
            {"$set": {"hello": message.text}},
            upsert=True
        )

        group_data = groups.find_one({"group_id": message.chat.id})
        settings_text = (
            "<b>‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏:</b>\n\n"
            "<b>üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('hello', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üëã –ü—Ä–æ—â–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('bye', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üìú –ü—Ä–∞–≤–∏–ª–∞:</b>\n"
            f"{group_data.get('rules', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:"
        )

        await message.answer(
            settings_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        await message.delete()
        await state.clear()
    except Exception as e:
        logger.error(f"Error in receive_hello_message: {e}")
        await message.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        await state.clear()


@router.message(ConfigureStates.setting_bye)
async def receive_bye_message(message: Message, state: FSMContext, bot: Bot):
    try:
        if not await check_admin_rights(message.from_user.id, message.chat.id, bot):
            await message.reply("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            await state.clear()
            return

        groups.update_one(
            {"group_id": message.chat.id},
            {"$set": {"bye": message.text}},
            upsert=True
        )

        group_data = groups.find_one({"group_id": message.chat.id})
        settings_text = (
            "<b>‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏:</b>\n\n"
            "<b>üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('hello', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üëã –ü—Ä–æ—â–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('bye', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üìú –ü—Ä–∞–≤–∏–ª–∞:</b>\n"
            f"{group_data.get('rules', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:"
        )

        await message.answer(
            settings_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        await message.delete()
        await state.clear()
    except Exception as e:
        logger.error(f"Error in receive_bye_message: {e}")
        await message.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        await state.clear()


@router.callback_query(F.data == "set_rules")
async def set_rules(callback_query: CallbackQuery, bot: Bot):
    try:
        if not await check_admin_rights(callback_query.from_user.id, callback_query.message.chat.id, bot):
            await callback_query.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", show_alert=True)
            return

        group_data = groups.find_one({"group_id": callback_query.message.chat.id})
        current_rules = group_data.get('rules',
                                       '–ü—Ä–∞–≤–∏–ª–∞ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ') if group_data else '–ü—Ä–∞–≤–∏–ª–∞ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ'

        await callback_query.message.edit_text(
            f"<b>üëÆ‚Äç‚ôÇÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–∏</b>\n\n"
            f"<b>–ü–æ—Ç–æ—á–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞:</b>\n"
            f"{current_rules}\n\n"
            f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞", callback_data="configure_rules_message")],
                    [types.InlineKeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                                                callback_data="back_to_main_menu")]
                ]
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in set_rules: {e}")
        await callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


@router.callback_query(F.data == "configure_rules_message")
async def configure_rules_message(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        if not await check_admin_rights(callback_query.from_user.id, callback_query.message.chat.id, bot):
            await callback_query.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", show_alert=True)
            return

        await state.set_state(ConfigureStates.setting_rules)
        await callback_query.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏:\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML-—Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É."
        )
    except Exception as e:
        logger.error(f"Error in configure_rules_message: {e}")
        await callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


@router.message(ConfigureStates.setting_rules)
async def receive_rules_message(message: Message, state: FSMContext, bot: Bot):
    try:
        if not await check_admin_rights(message.from_user.id, message.chat.id, bot):
            await message.reply("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            await state.clear()
            return

        groups.update_one(
            {"group_id": message.chat.id},
            {"$set": {"rules": message.text}},
            upsert=True
        )

        await message.answer(
            "<b>‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        await message.delete()
        await state.clear()
    except Exception as e:
        logger.error(f"Error in receive_rules_message: {e}")
        await message.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–∞–≤–∏–ª.")
        await state.clear()


@router.message(Command("rules"))
async def show_rules(message: Message):
    try:
        group_data = groups.find_one({"group_id": message.chat.id})
        if group_data and group_data.get("rules"):
            await message.reply(
                f"<b>üìú –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏:</b>\n\n{group_data['rules']}",
                parse_mode="HTML"
            )
        else:
            await message.reply("‚ùå –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ.")
    except Exception as e:
        logger.error(f"Error in show_rules: {e}")
        await message.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–∞–≤–∏–ª.")


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: CallbackQuery, bot: Bot):
    try:
        if not await check_admin_rights(callback_query.from_user.id, callback_query.message.chat.id, bot):
            await callback_query.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", show_alert=True)
            return

        group_data = groups.find_one({"group_id": callback_query.message.chat.id})
        if not group_data:
            group_data = {
                "hello": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                "bye": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                "rules": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ"
            }

        settings_text = (
            "<b>‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏:</b>\n\n"
            "<b>üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('hello', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üëã –ü—Ä–æ—â–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('bye', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üìú –ü—Ä–∞–≤–∏–ª–∞:</b>\n"
            f"{group_data.get('rules', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:"
        )

        await callback_query.message.edit_text(
            settings_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in back_to_main_menu: {e}")
        await callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def bot_joined_group(event: ChatMemberUpdated, bot: Bot):
    try:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Rombi",
            callback_data=f"configure_rombi:{event.from_user.id}")
        )

        group = await bot.get_chat(event.chat.id)
        groups.update_one(
            {"group_id": group.id},
            {
                "$setOnInsert": {
                    "group_name": group.title,
                    "group_id": group.id,
                    "hello": None,
                    "rules": None,
                    "bye": None
                }
            },
            upsert=True
        )

        await bot.send_message(
            event.chat.id,
            "ü•≥ –ü—Ä–∏–≤—ñ—Ç, —è Rombi. –©–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º–µ–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Rombi</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in bot_joined_group: {e}")


@router.callback_query(F.data.startswith("configure_rombi"))
async def configure_rombi_callback(callback_query: CallbackQuery, bot: Bot):
    try:
        if not await check_admin_rights(callback_query.from_user.id, callback_query.message.chat.id, bot):
            await callback_query.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", show_alert=True)
            return

        group_data = groups.find_one({"group_id": callback_query.message.chat.id})
        if not group_data:
            group_data = {
                "hello": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                "bye": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                "rules": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ"
            }

        settings_text = (
            "<b>‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏:</b>\n\n"
            "<b>üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('hello', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üëã –ü—Ä–æ—â–∞–Ω–Ω—è:</b>\n"
            f"{group_data.get('bye', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "<b>üìú –ü—Ä–∞–≤–∏–ª–∞:</b>\n"
            f"{group_data.get('rules', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:"
        )

        await callback_query.message.edit_text(
            settings_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in configure_rombi_callback: {e}")
        await callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> MEMBER))
async def user_joined(event: ChatMemberUpdated, bot: Bot):
    try:
        group_data = groups.find_one({"group_id": event.chat.id})
        if group_data and group_data.get("hello") and group_data.get("hello_enabled", True):
            username = event.new_chat_member.user.username or event.new_chat_member.user.full_name
            hello_message = group_data["hello"].replace("{user}", f"@{username}")
            await bot.send_message(
                event.chat.id,
                hello_message,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Error in user_joined: {e}")


@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER >> IS_NOT_MEMBER))
async def user_left(event: ChatMemberUpdated, bot: Bot):
    try:
        group_data = groups.find_one({"group_id": event.chat.id})
        if group_data and group_data.get("bye"):
            username = event.new_chat_member.user.username or event.new_chat_member.user.full_name
            await bot.send_message(
                event.chat.id,
                group_data["bye"].replace("{user}", f"@{username}"),
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Error in user_left: {e}")
